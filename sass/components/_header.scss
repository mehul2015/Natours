.header {
  height: 95vh;
  /* Will take up 95 percent of the viewport height */
  background-image: linear-gradient(
      to right,
      rgba($color-primary-light, 0.877),
      rgba($color-primary-dark, 0.855)
    ),
    url(../img/hero.jpg);
  /* Putting two background images over each other, the first one is the top one, so we reduce its opacity to make
        the second one visible */
  background-size: cover;
  /* Whatever the width of the viewport or the parent is, it will take up the entire space */
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Is used to clip an element by specifying which coordinates our element should be visible in, go in clockwise direction
      starting from top-left*/
  position: relative;
  /* So that our headers,image and "discover more" button can be absolute */
}

.logo-box {
  /* This is the container for our image and we can position this absolutely in our header which is our parent */
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.logo {
  height: 3.5rem;
  /* Width is automatically figured out by browser */
}

.text-box {
  /* This is the container for our headers and button and we can position this absolutely in our header which is our parent */
  position: absolute;
  top: 40%;
  left: 50%;
  /* The above two are in relation to the parent element */
  transform: translate(-50%, -50%);
  /* Shifting the text box to -50 percent its OWN width and height to make it appear in the center */
  text-align: center;
  /* Since the button (anchor tag) is an inline block element it is treated as text so we can align it in the center by just
      saying text align */
}

.heading-primary {
  color: white;
  text-transform: uppercase;
  margin-bottom: 6rem;
}

.heading-primary-main {
  /* since span is an inline element and we want our heading lines to be one after the other
      we can change its display to block to make it act like a block level element */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation: moveInLeft 1s;

  backface-visibility: hidden;
  /* To stop the shakiness of animations */
}

.heading-primary-sub {
  /* since span is an inline element and we want our heading lines to be one after the other
      we can change its display to block to make it act like a block level element */
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.7rem;
  animation: moveInRight 1s;

  backface-visibility: hidden;
  /* To stop the shakiness of animations */
}

/* Pseudo elements allows us to potentially create virtual elements so, the after pseudo element
    acts like an element after the one we have currently selected even though there is nothing
    like that in our markup */
